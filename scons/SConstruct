import os
env = Environment(ENV = {'PATH' : os.environ['PATH']})

env['APP_TARGET'] = 'BulletAssimpModelApp'
env['APP_SOURCES'] = ['AssimpModel.cpp', 'BulletConstraint.cpp', 'BulletWorld.cpp',
	'BulletAssimpModelApp.cpp', 'BulletParameter.cpp', 'CinderBulletDebugDrawer.cpp',
	'LeapListener.cpp']
env['ASSETS'] = ['tomi1.jpg', 'bird.dae', 'bird.xml']
env['ASSETS'] += ['stage/*']
env['DEBUG'] = 0

def CheckPKGConfig(context, version):
	context.Message( 'Checking for pkg-config... ' )
	ret = context.TryAction('pkg-config --atleast-pkgconfig-version=%s' % version)[0]
	context.Result(ret)
	return ret

def CheckPKG(context, name):
	context.Message('Checking for %s... ' % name)
	ret = context.TryAction("pkg-config --exists '%s'" % name)[0]
	context.Result(ret)
	return ret

if (not GetOption('clean')):
	conf = env.Configure(custom_tests = { 'CheckPKGConfig' : CheckPKGConfig,
		'CheckPKG' : CheckPKG })
	if not conf.CheckPKGConfig('0.15'):
		print 'ERROR: pkg-config not found.'
		Exit(1)

	_LIBS = ['bullet']

	for lib in _LIBS:
		if not conf.CheckPKG(lib):
			print "ERROR: '%s' must be installed!" % (lib)
			Exit(1)
		else:
			env.ParseConfig('pkg-config --cflags --libs %s' % (lib))

	env = conf.Finish()

import re, sys

if sys.platform == 'darwin':
	DYLIBS_TO_INSTALL = ['libBulletSoftBody.2.80.dylib', 'libBulletDynamics.2.80.dylib', \
						'libBulletCollision.2.80.dylib', 'libLinearMath.2.80.dylib']

# find all executable files, dynamic libraries, frameworks, whose install
# names have to be changed
def find_executables(bundledir):
	pipe = os.popen('find %s -perm -755 -type f' % bundledir)
	dtargets = pipe.readlines()
	pipe.close()
	dtargets = map(lambda (l): l[:-1], dtargets) # remove lineends
	dtargets = filter(lambda (l): l[-3:] != '.ss', dtargets) # remove executable scripts
	return dtargets

# returns the shared libraries used by target
# first one in the list is the shared library identification name if
# it is a dynamic library or framework
def get_sharedlibs(target):
	file = os.popen('otool -L %s' % target)
	dlibs = file.readlines()
	file.close()
	return dlibs[1:]

install_names = {}
target_dlibs = {}

def change_id(target):
	global install_names
	print 'processing %s...' % target
	dlibs = get_sharedlibs(target)
	dlibs = map(lambda (d): d.strip().split()[0], dlibs)
	# change identification name of shared library or framework
	if ((target.find('framework') > -1) or (target.find('dylib') > -1)) and \
		(dlibs[0].find('@') == -1):
		id = dlibs[0]
		try:
			m = re.search('.*/(.+\.dylib)', target)
			nid = '@loader_path/' + m.group(1)

			print 'changing identification name %s -> %s' % (id, nid)
			install_names[id] = nid
			os.system('install_name_tool -id %s %s' % (nid, target))
		except:
			pass
		dlibs = dlibs[1:] # remove the id
	target_dlibs[target] = dlibs

def change_dlibs(target):
	print 'processing %s...' % target
	dlibs = target_dlibs[target]
	for d in dlibs:
		if d in install_names:
			print 'changing install name %s -> %s' % (d, install_names[d])
			os.system('install_name_tool -change %s %s %s' % \
				(d, install_names[d], target))

def change_install_names(target, source, env):
	dtargets = find_executables(env['APP_TARGET'] + '.app')
	for t in dtargets:
		change_id(t)
	for t in dtargets:
		change_dlibs(t)
	return 0

def copy_dylibs(target, source, env):
	for l in DYLIBS_TO_INSTALL:
		fout = env['APP_TARGET'] + '.app/Contents/MacOS/' + l
		fin = '/opt/local/lib/' + l
		env.Execute(Copy(fout, fin))
	return 0

env = SConscript('../../../blocks/MndlKit/scons/SConscript', exports = 'env')
env = SConscript('../../../blocks/Cinder-Leap/scons/SConscript', exports = 'env')
env = SConscript('../../../blocks/Cinder-Assimp/scons/SConscript', exports = 'env')

SConscript('../../../scons/SConscript', exports = 'env')

if sys.platform == 'darwin':
	bundle_exe = env['APP_TARGET'] + '.app/Contents/MacOS/' + env['APP_TARGET']
	env.AddPostAction(bundle_exe, Action(copy_dylibs))
	env.AddPostAction([bundle_exe,] + [env['APP_TARGET'] + '.app/Contents/MacOS/' + d for d in DYLIBS_TO_INSTALL],
			Action(change_install_names))

